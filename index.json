[{"categories":["私有云"],"content":"\r想搭建自己的个人分享网盘，可以方便分享上传小文件，可以直接下载，所以就使用FileBrowser来搭建自己的私有云盘 FileBrowser官网地址：https://github.com/filebrowser/filebrowser \r","date":"2022-04-10","objectID":"/filebrowser%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%BD%91%E7%9B%98%E7%A7%81%E6%9C%89%E4%BA%91%E5%88%86%E4%BA%AB%E5%B7%A5%E5%85%B7/:0:0","series":null,"tags":["FileBrowser"],"title":"FileBrowser轻量级网盘（私有云）分享工具","uri":"/filebrowser%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%BD%91%E7%9B%98%E7%A7%81%E6%9C%89%E4%BA%91%E5%88%86%E4%BA%AB%E5%B7%A5%E5%85%B7/#"},{"categories":["私有云"],"content":"服务器配置 建议在有活动的时候购买服务器，常见的服务器：腾讯云，阿里云，购买地址带了我的返佣链接，如果介意直接百度去官网买就好了哈。 服务器配置看个人需求吧,根据预设来选择，购买时会让你选择系统，建议Centos7 可以使用SSH工具进行远程服务器，推荐finallshell和xshell，可以去官网下载安装 \r","date":"2022-04-10","objectID":"/filebrowser%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%BD%91%E7%9B%98%E7%A7%81%E6%9C%89%E4%BA%91%E5%88%86%E4%BA%AB%E5%B7%A5%E5%85%B7/:1:0","series":null,"tags":["FileBrowser"],"title":"FileBrowser轻量级网盘（私有云）分享工具","uri":"/filebrowser%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%BD%91%E7%9B%98%E7%A7%81%E6%9C%89%E4%BA%91%E5%88%86%E4%BA%AB%E5%B7%A5%E5%85%B7/#服务器配置"},{"categories":["私有云"],"content":"宝塔安装 去宝塔官网安装，选择Linux面板，现在适合自己服务器系统的命令，复制命令到ssh安装 我这里使用的是centos7安装命令 yum install -y wget \u0026\u0026 wget -O install.sh http://download.bt.cn/install/install_6.0.sh \u0026\u0026 sh install.sh 安装完成后去服务器控制台放行8888端口 登录宝塔外网地址，用安装时生成的账号密码登录，可以一键安装宝塔推荐的一些LNMP \r","date":"2022-04-10","objectID":"/filebrowser%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%BD%91%E7%9B%98%E7%A7%81%E6%9C%89%E4%BA%91%E5%88%86%E4%BA%AB%E5%B7%A5%E5%85%B7/:2:0","series":null,"tags":["FileBrowser"],"title":"FileBrowser轻量级网盘（私有云）分享工具","uri":"/filebrowser%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%BD%91%E7%9B%98%E7%A7%81%E6%9C%89%E4%BA%91%E5%88%86%E4%BA%AB%E5%B7%A5%E5%85%B7/#宝塔安装"},{"categories":["私有云"],"content":"安装Docker 万物皆可Docker 装完宝塔再安装Docker就超级简单，宝塔面板点击软件商店，搜索docker然后安装 国内拉取镜像可能特别慢，可以配置一些镜像加速器，这样提高下载速率 宝塔面板👉软件商店👉Docker设置👉加速器👉复制下面内容👉保存 {\"registry-mirrors\": [\"https://docker.mirrors.ustc.edu.cn\", \"https://hub-mirror.c.163.com\", \"https://mirror.baidubce.com\", \"https://reg-mirror.qiniu.com\"]} 四个分别是科大镜像、网易镜像、百度镜像、七牛云镜像 \r","date":"2022-04-10","objectID":"/filebrowser%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%BD%91%E7%9B%98%E7%A7%81%E6%9C%89%E4%BA%91%E5%88%86%E4%BA%AB%E5%B7%A5%E5%85%B7/:3:0","series":null,"tags":["FileBrowser"],"title":"FileBrowser轻量级网盘（私有云）分享工具","uri":"/filebrowser%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%BD%91%E7%9B%98%E7%A7%81%E6%9C%89%E4%BA%91%E5%88%86%E4%BA%AB%E5%B7%A5%E5%85%B7/#安装docker"},{"categories":["私有云"],"content":"安装FileBrowser 宝塔面板点击文件，创建两个文件夹filebrowser和yalida（可以自定义名字），filebrowser是数据文件，yalida是分享文件存放目录 \rfilebrowser文件夹下再创建config和database文件夹，config下创建配置文件settings.json，database下创建数据库文件filebrowser.db，目录树如下： ├── filebrowser │ ├── config │ │ └── settings.json │ └── database │ └── filebrowser.db ├── yalida \r双击编辑settings.json文件，输入以下内容并保存 { \"port\": 80, \"baseURL\": \"\", \"address\": \"\", \"log\": \"stdout\", \"database\": \"/database/filebrowser.db\", \"root\": \"/srv\" } \r然后一键安装FileBrowser，ssh工具中输入以下命令（需要一行一行输入！！！） sudo docker run -d \\ -v /www/wwwroot/yalida:/srv \\ -v /www/wwwroot/filebrowser/database/filebrowser.db:/database/filebrowser.db \\ -v /www/wwwroot/filebrowser/config/settings.json:/config/settings.json \\ -e PUID=$(id -u) \\ -e PGID=$(id -g) \\ -p 8080:80 \\ --name=share \\ --privileged=true \\ --restart always \\ filebrowser/filebrowser:v2-s6 容器内文件夹**/srv映射的/yalida目录就是站点根目录，需要分享的文件放在/yalida**目录下即可。 映射的8080端口不要和其他服务冲突，同时要在在宝塔和云平台放行端口。 最后，可以通过ip+端口来访问filebrowser了，初始用户和密码都是admin。 \r","date":"2022-04-10","objectID":"/filebrowser%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%BD%91%E7%9B%98%E7%A7%81%E6%9C%89%E4%BA%91%E5%88%86%E4%BA%AB%E5%B7%A5%E5%85%B7/:4:0","series":null,"tags":["FileBrowser"],"title":"FileBrowser轻量级网盘（私有云）分享工具","uri":"/filebrowser%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%BD%91%E7%9B%98%E7%A7%81%E6%9C%89%E4%BA%91%E5%88%86%E4%BA%AB%E5%B7%A5%E5%85%B7/#安装filebrowser"},{"categories":["私有云"],"content":"配置FileBrowser 去Setting里面修改语言为中文，点击update，然后修改密码，点击更新 \r可以开启用户注册、设定用户权限、自定义品牌信息，可以建立多个用户访问，同时可以指定权限和目录范围。这里的[.]代表就是根目录。 \r在 设置-全局设置-品牌-实例名称 进行修改 \r在映射的根目录yalida下新建一个style文件夹，来管理自定义品牌信息，logo.svg和img目录，custom.css用来自定义样式，目录树如下： ├── yalida │ └── style │ ├── custom.css │ └── img │ ├── icons │ └── logo.svg \r由于是Docker部署，所以品牌信息文件夹路径填/srv/style，同时勾选禁用外部链接选项 \rlogo.svg主要是控制站点的登录logo和管理面板左上角的logo，如果想修改favicon图标，可以在/style/img/icons目录下定义不同的icon图标，可以参考官方文档，推荐一个网站图标生成器，可以很容易生成这些文件。 ","date":"2022-04-10","objectID":"/filebrowser%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%BD%91%E7%9B%98%E7%A7%81%E6%9C%89%E4%BA%91%E5%88%86%E4%BA%AB%E5%B7%A5%E5%85%B7/:5:0","series":null,"tags":["FileBrowser"],"title":"FileBrowser轻量级网盘（私有云）分享工具","uri":"/filebrowser%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%BD%91%E7%9B%98%E7%A7%81%E6%9C%89%E4%BA%91%E5%88%86%E4%BA%AB%E5%B7%A5%E5%85%B7/#配置filebrowser"},{"categories":["WPF"],"content":" 💡 GitHub 官方网址：https://github.com ","date":"2022-04-02","objectID":"/github%E6%93%8D%E4%BD%9C/:0:0","series":null,"tags":["WPF","Prism"],"title":"GitHub操作","uri":"/github%E6%93%8D%E4%BD%9C/#"},{"categories":["WPF"],"content":"创建远程仓库 输入仓库名点击创建 ","date":"2022-04-02","objectID":"/github%E6%93%8D%E4%BD%9C/:1:0","series":null,"tags":["WPF","Prism"],"title":"GitHub操作","uri":"/github%E6%93%8D%E4%BD%9C/#创建远程仓库"},{"categories":["WPF"],"content":"远程仓库操作 命令名称 作用 git remote -v 查看当前所有远程地址别名 git remote add 别名 远程地址 起别名 git push 别名 分支 推送本地分支上的内容到远程仓库 git clone 远程地址 将远程仓库的内容克隆到本地 git pull 远程仓库别名 远程分支名 将远程仓库对应分支最新内容拉下来后与当前本地分支直接合并 ","date":"2022-04-02","objectID":"/github%E6%93%8D%E4%BD%9C/:2:0","series":null,"tags":["WPF","Prism"],"title":"GitHub操作","uri":"/github%E6%93%8D%E4%BD%9C/#远程仓库操作"},{"categories":["WPF"],"content":"创建远程仓库别名 git remote -v 查看当前所有远程地址别名 git remote add 别名 远程地址 https://github.com/Sun-ZIFA/Git_Test.git 是创建仓库后的HTTPS地址 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git remote -v ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git remote add git-test https://github.com/Sun-ZIFA/Git_Test.git ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git remote -v git-test https://github.com/Sun-ZIFA/Git_Test.git (fetch) git-test https://github.com/Sun-ZIFA/Git_Test.git (push) ","date":"2022-04-02","objectID":"/github%E6%93%8D%E4%BD%9C/:2:1","series":null,"tags":["WPF","Prism"],"title":"GitHub操作","uri":"/github%E6%93%8D%E4%BD%9C/#创建远程仓库别名"},{"categories":["WPF"],"content":"推送本地分支到远程库 git push 别名 分支 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git push git-test master Enumerating objects: 13, done. Counting objects: 100% (13/13), done. Delta compression using up to 16 threads Compressing objects: 100% (5/5), done. Writing objects: 100% (13/13), 1.03 KiB | 1.03 MiB/s, done. Total 13 (delta 1), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (1/1), done. To https://github.com/Sun-ZIFA/Git_Test.git * [new branch] master -\u003e master ","date":"2022-04-02","objectID":"/github%E6%93%8D%E4%BD%9C/:2:2","series":null,"tags":["WPF","Prism"],"title":"GitHub操作","uri":"/github%E6%93%8D%E4%BD%9C/#推送本地分支到远程库"},{"categories":["WPF"],"content":"克隆远程仓库到本地 git clone 远程地址 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/项目备份/ObjectDisk $ git clone https://github.com/Clover-You/ObjectDisk.git Cloning into 'ObjectDisk'... remote: Enumerating objects: 1228, done. remote: Counting objects: 100% (1228/1228), done. remote: Compressing objects: 100% (731/731), done. remote: Total 1228 (delta 766), reused 906 (delta 455), pack-reused 0 Receiving objects: 100% (1228/1228), 1.35 MiB | 718.00 KiB/s, done. Resolving deltas: 100% (766/766), done. ","date":"2022-04-02","objectID":"/github%E6%93%8D%E4%BD%9C/:2:3","series":null,"tags":["WPF","Prism"],"title":"GitHub操作","uri":"/github%E6%93%8D%E4%BD%9C/#克隆远程仓库到本地"},{"categories":["WPF"],"content":"拉取远程库内容 git pull 远程库别名 远程库分支名 //远程库修改后，将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git pull git-test master remote: Enumerating objects: 5, done. remote: Counting objects: 100% (5/5), done. remote: Compressing objects: 100% (2/2), done. remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 Unpacking objects: 100% (3/3), 686 bytes | 76.00 KiB/s, done. From https://github.com/Sun-ZIFA/Git_Test * branch master -\u003e FETCH_HEAD cd27077..568ea4b master -\u003e git-test/master Updating cd27077..568ea4b Fast-forward hello.txt | 1 + 1 file changed, 1 insertion(+) ","date":"2022-04-02","objectID":"/github%E6%93%8D%E4%BD%9C/:2:4","series":null,"tags":["WPF","Prism"],"title":"GitHub操作","uri":"/github%E6%93%8D%E4%BD%9C/#拉取远程库内容"},{"categories":["WPF"],"content":"什么是分支 在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。（分支底层其实也是指针的引用） ","date":"2022-04-02","objectID":"/git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/:1:0","series":null,"tags":["WPF","Prism"],"title":"Git分支操作","uri":"/git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/#什么是分支"},{"categories":["WPF"],"content":"分支的好处 同时并行推进多个功能开发，提高开发效率。 各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。 ","date":"2022-04-02","objectID":"/git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/:2:0","series":null,"tags":["WPF","Prism"],"title":"Git分支操作","uri":"/git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/#分支的好处"},{"categories":["WPF"],"content":"分支的操作 命令名称 作用 git branch 分支名 创建分支 git branch -v 查看分支 git checkout 分支名 切换分支 git merge 分支名 把指定的分支合并到当前分支上 ","date":"2022-04-02","objectID":"/git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/:3:0","series":null,"tags":["WPF","Prism"],"title":"Git分支操作","uri":"/git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/#分支的操作"},{"categories":["WPF"],"content":"查看分支 git branch -v ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git branch -v * master a6fa5e1 first commit （*代表当前所在的分区） ","date":"2022-04-02","objectID":"/git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/:3:1","series":null,"tags":["WPF","Prism"],"title":"Git分支操作","uri":"/git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/#查看分支"},{"categories":["WPF"],"content":"创建分支 git branch 分支名 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git branch hot-fix ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git branch -v hot-fix a6fa5e1 first commit * master a6fa5e1 first commit ","date":"2022-04-02","objectID":"/git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/:3:2","series":null,"tags":["WPF","Prism"],"title":"Git分支操作","uri":"/git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/#创建分支"},{"categories":["WPF"],"content":"切换分支 git checkout 分支名 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git checkout hot-fix Switched to branch 'hot-fix' ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (hot-fix) $ ","date":"2022-04-02","objectID":"/git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/:3:3","series":null,"tags":["WPF","Prism"],"title":"Git分支操作","uri":"/git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/#切换分支"},{"categories":["WPF"],"content":"合并分支 git merge 分支名 //切换到hot-fix分支 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git checkout hot-fix Switched to branch 'hot-fix' //修改hot-fix分支下的hello.txt Welcome to you ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (hot-fix) $ vim hello.txt //添加到暂存区 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (hot-fix) $ git add hello.txt //提交到本地库 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (hot-fix) $ git commit -m \"hot-fix first commit\" hello.txt [hot-fix 7aab108] hot-fix first commit 1 file changed, 1 insertion(+), 1 deletion(-) //切换到主分区master ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (hot-fix) $ git checkout master Switched to branch 'master' //在主分区master下合并hot-fix分区 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git merge hot-fix Updating a6fa5e1..7aab108 Fast-forward hello.txt | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-) //查看hello.txt文件 已经修改 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ cat hello.txt Hello World! Welcome to you! ","date":"2022-04-02","objectID":"/git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/:3:4","series":null,"tags":["WPF","Prism"],"title":"Git分支操作","uri":"/git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/#合并分支"},{"categories":["WPF"],"content":"产生冲突 冲突产生的表现：后面状态为 MERGING ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master|MERGING) 冲突产生的原因： 合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。Git 无法替 我们决定使用哪一个。必须人为决定新代码内容。 //修改master分支上的hello.txt 添加一行Hello WPF！ ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ vim hello.txt //添加到暂存区 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git add hello.txt //提交到本地库 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git commit -m \"update 1\" hello.txt [master 4e3f85c] update 1 1 file changed, 1 insertion(+) //切换到hot-fix分区 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git checkout hot-fix Switched to branch 'hot-fix' //修改hot-fix分区的hello.txt 添加一行Hello Git！ ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (hot-fix) $ vim hello.txt //添加到暂存区 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (hot-fix) $ git add hello.txt //提交到本地库 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (hot-fix) $ git commit -m \"update 2\" [hot-fix fc47191] update 2 1 file changed, 1 insertion(+) //切换到master主分区 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (hot-fix) $ git checkout master Switched to branch 'master' //合并hot-fix分区，提示需要手动合并代码 后面状态为MERGING ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git merge hot-fix Auto-merging hello.txt CONFLICT (content): Merge conflict in hello.txt Automatic merge failed; fix conflicts and then commit the result. //编辑有冲突的文件hello.txt，删除特殊符号，保留要使用的内容 //特殊符号：\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD 当前分支的代码 ======= 合并过来的代码 \u003e\u003e\u003e\u003e\u003e\u003e\u003e hot-fix ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master|MERGING) $ vim hello.txt //添加到暂存区 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master|MERGING) $ git add hello.txt //提交到本地库时不能带文件名，不然报错 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master|MERGING) $ git commit -m \"update 3\" hello.txt fatal: cannot do a partial commit during a merge. //提交到本地库 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master|MERGING) $ git commit -m \"update 3\" [master cd27077] update 3 //发现后面MERGING消失，变为正常 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ ","date":"2022-04-02","objectID":"/git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/:3:5","series":null,"tags":["WPF","Prism"],"title":"Git分支操作","uri":"/git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/#产生冲突"},{"categories":["WPF"],"content":" 💡 Git官方地址：https://git-scm.com/ 根据自己电脑系统安装最新的Git，安装过程中所有配置可以直接默认下一步 选择 Git 安装位置，要求是非中文并且没有空格的目录，然后下一步。 Git 选项配置，推荐默认设置，然后下一步。 Git 安装目录名，不用修改，直接点击下一步。 Git 的默认编辑器，建议使用默认的 Vim 编辑器，然后点击下一步。 默认分支名设置，选择让 Git 决定，分支名默认为 master，下一步。 修改 Git 的环境变量，选第一个，不修改环境变量，只在 Git Bash 里使用 Git。 选择后台客户端连接协议，选默认值 OpenSSL，然后下一步。 配置 Git 文件的行末换行符，Windows 使用 CRLF，Linux 使用 LF，选择第一个自动转换，然后继续下一步。 选择 Git 终端类型，选择默认的 Git Bash 终端，然后继续下一步。 选择 Git pull 合并的模式，选择默认，然后下一步。 选择 Git 的凭据管理器，选择默认的跨平台的凭据管理器，然后下一步。 其他配置，选择默认设置，然后下一步。 实验室功能，技术还不成熟，有已知的 bug，不要勾选，然后点击右下角的 Install按钮，开始安装 Git。 点击 Finsh 按钮，Git 安装成功！ 右键任意位置，在右键菜单里选择 Git Bash Here 即可打开 Git Bash 命令行终端。 在 Git Bash 终端里输入 git –version 查看 git 版本，如图所示，说明 Git 安装成功。 ","date":"2022-04-02","objectID":"/git%E5%AE%89%E8%A3%85/:0:0","series":null,"tags":["WPF","Prism"],"title":"Git安装","uri":"/git%E5%AE%89%E8%A3%85/#"},{"categories":["WPF"],"content":" 命令名称 作用 git config – global user.name 用户名 设置用户签名 git config – global user.email 邮箱 设置用户签名 git init 初始化本地库 git status 查看本地库状态 git add 文件名 添加到暂存区 git commit -m “日志信息” 文件名 提交到本地库 git reflog 查看历史记录 git reset – hard 版本号 版本穿梭 ","date":"2022-04-02","objectID":"/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:0:0","series":null,"tags":["WPF","Prism"],"title":"Git常用命令","uri":"/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#"},{"categories":["WPF"],"content":"设置用户签名 签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。Git 首次安装必须设置一下用户签名，否则无法提交代码。 这里设置用户签名和将来登录 GitHub（或其他代码托管中心）的账号没有任何关系。 git config –global user.name 用户名 git config –global user.email 邮箱 ZIFA@LAPTOP-OU8IUASF MINGW64 ~ $ git config --global user.name ZIFA ZIFA@LAPTOP-OU8IUASF MINGW64 ~ $ git config --global user.email 1697838602@qq.com ","date":"2022-04-02","objectID":"/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:1:0","series":null,"tags":["WPF","Prism"],"title":"Git常用命令","uri":"/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#设置用户签名"},{"categories":["WPF"],"content":"初始化本地库 git init ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test $ git init Initialized empty Git repository in E:/Test/Git_Test/.git/ 初始化会在项目地址生成.git文件夹，需要显示隐藏文件 ","date":"2022-04-02","objectID":"/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:2:0","series":null,"tags":["WPF","Prism"],"title":"Git常用命令","uri":"/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#初始化本地库"},{"categories":["WPF"],"content":"查看本地库状态 git status 首次查看 工作区没有任何文件 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git status On branch master No commits yet nothing to commit (create/copy files and use \"git add\" to track) 新增hello.txt文件 //内容：Hello World！ ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ vim hello.txt 再次查看 检测到未追踪的文件 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git status On branch master No commits yet Untracked files: (use \"git add \u003cfile\u003e...\" to include in what will be committed) hello.txt nothing added to commit but untracked files present (use \"git add\" to track) ","date":"2022-04-02","objectID":"/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:3:0","series":null,"tags":["WPF","Prism"],"title":"Git常用命令","uri":"/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#查看本地库状态"},{"categories":["WPF"],"content":"添加暂存区 git add 文件名 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git add hello.txt warning: LF will be replaced by CRLF in hello.txt. The file will have its original line endings in your working directory 查看状态 检测到暂存区有新文件 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git status On branch master No commits yet Changes to be committed: (use \"git rm --cached \u003cfile\u003e...\" to unstage) new file: hello.txt ","date":"2022-04-02","objectID":"/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:4:0","series":null,"tags":["WPF","Prism"],"title":"Git常用命令","uri":"/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#添加暂存区"},{"categories":["WPF"],"content":"提交到本地库 git commit -m “日志信息” 文件名 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git commit -m \"first commit\" hello.txt warning: LF will be replaced by CRLF in hello.txt. The file will have its original line endings in your working directory [master (root-commit) a6fa5e1] first commit 1 file changed, 1 insertion(+) create mode 100644 hello.txt 查看状态 没有文件需要提交 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git status On branch master nothing to commit, working tree clean ","date":"2022-04-02","objectID":"/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:5:0","series":null,"tags":["WPF","Prism"],"title":"Git常用命令","uri":"/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#提交到本地库"},{"categories":["WPF"],"content":"修改文件 //修改hello.txt里面的内容 另添加一行Hello Git！ ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ vim hello.txt //查看状态 检测到工作区有文件被修改 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git status On branch master Changes not staged for commit: (use \"git add \u003cfile\u003e...\" to update what will be committed) (use \"git restore \u003cfile\u003e...\" to discard changes in working directory) modified: hello.txt no changes added to commit (use \"git add\" and/or \"git commit -a\") //将修改的文件再次添加到暂存区 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git add hello.txt warning: LF will be replaced by CRLF in hello.txt. The file will have its original line endings in your working directory //查看状态 工作区的修改添加到了暂存区 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git status On branch master Changes to be committed: (use \"git restore --staged \u003cfile\u003e...\" to unstage) modified: hello.txt //提交到本地库 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git commit -m \"second commit\" hello.txt warning: LF will be replaced by CRLF in hello.txt. The file will have its original line endings in your working directory [master 6935bb4] second commit 1 file changed, 1 insertion(+) //查看状态 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git status On branch master nothing to commit, working tree clean ","date":"2022-04-02","objectID":"/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:6:0","series":null,"tags":["WPF","Prism"],"title":"Git常用命令","uri":"/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#修改文件"},{"categories":["WPF"],"content":"历史版本 ","date":"2022-04-02","objectID":"/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:7:0","series":null,"tags":["WPF","Prism"],"title":"Git常用命令","uri":"/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#历史版本"},{"categories":["WPF"],"content":"查看历史版本 git reflog 查看版本信息 git log 查看版本详细信息 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git reflog 6935bb4 (HEAD -\u003e master) HEAD@{0}: commit: second commit a6fa5e1 HEAD@{1}: commit (initial): first commit ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git log commit 6935bb458799fafc90d83a30345dc154f634ef16 (HEAD -\u003e master) Author: liuzifa \u003c1697838602@qq.com\u003e Date: Wed Mar 30 10:00:11 2022 +0800 second commit commit a6fa5e1bd1b3bc5f757cf434241868b80622d0dc Author: liuzifa \u003c1697838602@qq.com\u003e Date: Wed Mar 30 09:19:37 2022 +0800 first commit ","date":"2022-04-02","objectID":"/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:7:1","series":null,"tags":["WPF","Prism"],"title":"Git常用命令","uri":"/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#查看历史版本"},{"categories":["WPF"],"content":"版本穿梭 git reset –hard 版本号 //首先查看当前的历史记录，可以看到当前是在 6935bb4 这个版本 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git reflog 6935bb4 (HEAD -\u003e master) HEAD@{0}: commit: second commit a6fa5e1 HEAD@{1}: commit (initial): first commit //切换到 a6fa5e1 版本，也就是我们第一次提交的版本 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git reset --hard a6fa5e1 HEAD is now at a6fa5e1 first commit //切换完毕之后再查看历史记录，当前成功切换到了 a6fa5e1 版本 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ git reflog a6fa5e1 (HEAD -\u003e master) HEAD@{0}: reset: moving to a6fa5e1 6935bb4 HEAD@{1}: commit: second commit a6fa5e1 (HEAD -\u003e master) HEAD@{2}: commit (initial): first commit //然后查看文件 hello.txt，发现文件内容已经变化 ZIFA@LAPTOP-OU8IUASF MINGW64 /e/Test/Git_Test (master) $ cat hello.txt Hello World! ","date":"2022-04-02","objectID":"/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/:7:2","series":null,"tags":["WPF","Prism"],"title":"Git常用命令","uri":"/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#版本穿梭"},{"categories":["WPF"],"content":" 💡 Git是一个免费的、开源的分布式版本控制系统 ","date":"2022-04-02","objectID":"/git%E6%A6%82%E8%BF%B0/:0:0","series":null,"tags":["WPF","Prism"],"title":"Git概述","uri":"/git%E6%A6%82%E8%BF%B0/#"},{"categories":["WPF"],"content":"什么是版本控制 记录文件修改历史记录，能让用户查看历史版本，方便版本切换 ","date":"2022-04-02","objectID":"/git%E6%A6%82%E8%BF%B0/:1:0","series":null,"tags":["WPF","Prism"],"title":"Git概述","uri":"/git%E6%A6%82%E8%BF%B0/#什么是版本控制"},{"categories":["WPF"],"content":"为什么需要版本控制 个人开发过渡到团队协助 ","date":"2022-04-02","objectID":"/git%E6%A6%82%E8%BF%B0/:2:0","series":null,"tags":["WPF","Prism"],"title":"Git概述","uri":"/git%E6%A6%82%E8%BF%B0/#为什么需要版本控制"},{"categories":["WPF"],"content":"版本控制工具 ","date":"2022-04-02","objectID":"/git%E6%A6%82%E8%BF%B0/:3:0","series":null,"tags":["WPF","Prism"],"title":"Git概述","uri":"/git%E6%A6%82%E8%BF%B0/#版本控制工具"},{"categories":["WPF"],"content":"集中式版本控制工具 CVS、SVN、VSS…… 有一个单一的集中管理的服务器，保存所有文件的修订版本，协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新 显而易见的缺点是中央服务器的单点故障。如果服务器宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作 ","date":"2022-04-02","objectID":"/git%E6%A6%82%E8%BF%B0/:3:1","series":null,"tags":["WPF","Prism"],"title":"Git概述","uri":"/git%E6%A6%82%E8%BF%B0/#集中式版本控制工具"},{"categories":["WPF"],"content":"分布式版本控制工具 Git、Mercurial、Bazaar、Darcs…… 像 Git 这种分布式版本控制工具，客户端提取的不是最新版本的文件快照，而是把代码仓库完整地镜像下来（本地库）。这样任何一处协同工作用的文件发生故障，事后都可以用其他客户端的本地仓库进行恢复 服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的），每个客户端保存的也都是整个完整的项目（包含历史记录，更加安全） ","date":"2022-04-02","objectID":"/git%E6%A6%82%E8%BF%B0/:3:2","series":null,"tags":["WPF","Prism"],"title":"Git概述","uri":"/git%E6%A6%82%E8%BF%B0/#分布式版本控制工具"},{"categories":["WPF"],"content":"Git和代码托管中心 ","date":"2022-04-02","objectID":"/git%E6%A6%82%E8%BF%B0/:4:0","series":null,"tags":["WPF","Prism"],"title":"Git概述","uri":"/git%E6%A6%82%E8%BF%B0/#git和代码托管中心"},{"categories":["WPF"],"content":"局域网 GitLab ","date":"2022-04-02","objectID":"/git%E6%A6%82%E8%BF%B0/:4:1","series":null,"tags":["WPF","Prism"],"title":"Git概述","uri":"/git%E6%A6%82%E8%BF%B0/#局域网"},{"categories":["WPF"],"content":"互联网 GitHub（外网） Gitee（国内网站） ","date":"2022-04-02","objectID":"/git%E6%A6%82%E8%BF%B0/:4:2","series":null,"tags":["WPF","Prism"],"title":"Git概述","uri":"/git%E6%A6%82%E8%BF%B0/#互联网"},{"categories":["WPF"],"content":" 💡 在WPF应用程序+Prism框架中，一般都是使用Navigation导航进行区域页面的切换，当我配置默认首页的时候出现了一些问题，所以这里来记录一下 配置默认首页的时候，我一开始的想法就是在构造函数中进行导航到首页 public class MainViewModel { public MainViewModel(IRegionManager regionManager) { regionManager.Regions[\"regionManager\"].RequestNavigate(\"IndexView\"); } } 但是在元素的构造函数被调用时，元素的很多属性都没准备好，就例如ContentControl中区域部分，从而导致异常，The region manager does not contain the regionManager region.   这时候就要去程序入口App.xaml.cs重写OnInitialized这个方法，如下 //App.xaml.cs protected override void OnInitialized() { var service = App.Current.MainWindow.DataContext as IConfigService; if(service != null) { //去执行Configure方法 service.Configure(); } base.OnInitialized(); } 这里使用了IConfigService接口存放程序初始配置项 //IConfigService.cs public interface IConfigService { void Configure(); } 继承IConfigService接口，实现Configure方法去进行导航切换 public class MainViewModel : IConfigService { private readonly IRegionManager regionManager; public MainViewModel(IRegionManager regionManager) { this.regionManager = regionManager; } public void Configure() { regionManager.Regions[\"regionManager\"].RequestNavigate(\"IndexView\"); } } ","date":"2022-04-02","objectID":"/%E9%85%8D%E7%BD%AE%E9%BB%98%E8%AE%A4%E9%A6%96%E9%A1%B5/:0:0","series":null,"tags":["WPF","Prism"],"title":"配置默认首页","uri":"/%E9%85%8D%E7%BD%AE%E9%BB%98%E8%AE%A4%E9%A6%96%E9%A1%B5/#"},{"categories":["JavaScript"],"content":" 日常开发中会有很多经常使用的正则表达式，这里整理20个常用的正则，可以方便以后使用，提高开发效率，copy使我快乐  ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#"},{"categories":["JavaScript"],"content":"1、手机号码的校验 const phoneReg = /^[1][3,4,5,6,7,8,9][0-9]{9}$/ const phoneStr1 = '18886233487' console.log(phoneReg.test(phoneStr1)) // true const phoneStr2 = '17283017203897' console.log(phoneReg.test(phoneStr2)) // false  ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#1手机号码的校验"},{"categories":["JavaScript"],"content":"2、身份证的校验 const sfzReg = /^[1-9]\\d{5}(18|19|([23]\\d))\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$/ const sfzStr1 = '415106199801012130' console.log(sfzReg.test(sfzStr1)) // true const sfzStr2 = '718381298381212183' console.log(sfzReg.test(sfzStr2)) // false  ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#2身份证的校验"},{"categories":["JavaScript"],"content":"3、邮箱的校验 const emailReg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/ const emailStrWY = '956666@163.com' // 163邮箱 const emailStrQQ = '956666@qq.com' // qq邮箱 console.log(emailReg.test(emailStrWY)) // true console.log(emailReg.test(emailStrQQ)) // true const noEmail = '72873213.com' console.log(emailReg.test(noEmail)) // false  ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#3邮箱的校验"},{"categories":["JavaScript"],"content":"4、URL的校验 const urlReg = /^((https?|ftp|file):\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/ const urlStr1 = 'https://haha.sunshine.com/xxx/xxx' console.log(urlReg.test(urlStr1)) // true const urlStr2 = 'sss://haha.sunshine.com/xxx/xxx' console.log(urlReg.test(urlStr2)) // false  ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#4url的校验"},{"categories":["JavaScript"],"content":"5、IPv4的校验 const ipv4Reg = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/ const ipv4Str1 = '122.12.56.65' console.log(ipv4Reg.test(ipv4Str1)) // true const ipv4Str2 = '122.12.56.655' console.log(ipv4Reg.test(ipv4Str2)) // false  ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#5ipv4的校验"},{"categories":["JavaScript"],"content":"6、16进制颜色的校验 const color16Reg = /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/ const color16Str1 = '#fff' console.log(color16Reg.test(color16Str1)) // true const color16Str2 = '#1234567' console.log(color16Reg.test(color16Str2)) // false  ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#616进制颜色的校验"},{"categories":["JavaScript"],"content":"7、日期 YYYY-MM-DD const dateReg = /^\\d{4}(\\-)\\d{1,2}\\1\\d{1,2}$/ const dateStr1 = '2021-10-10' console.log(dateReg.test(dateStr1)) // true const dateStr2 = '2021-01-01 1' console.log(dateReg.test(dateStr2)) // false  ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#7日期-yyyy-mm-dd"},{"categories":["JavaScript"],"content":"8、日期 YYYY-MM-DD hh:mm:ss const dateReg = /^(\\d{1,4})(-|\\/)(\\d{1,2})\\2(\\d{1,2}) (\\d{1,2}):(\\d{1,2}):(\\d{1,2})$/ const dateStr1 = '2021-10-10 16:16:16' console.log(dateReg.test(dateStr1)) // true const dateStr2 = '2021-10-10 16:' console.log(dateReg.test(dateStr2)) // false  ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#8日期-yyyy-mm-dd-hhmmss"},{"categories":["JavaScript"],"content":"9、整数的校验 const intReg = /^[-+]?\\d*$/ const intNum1 = 12345 console.log(intReg.test(intNum1)) // true const intNum2 = 12345.1 console.log(intReg.test(intNum2)) // false  ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#9整数的校验"},{"categories":["JavaScript"],"content":"10、小数的校验 const floatReg = /^[-\\+]?\\d+(\\.\\d+)?$/ const floatNum = 1234.5 console.log(floatReg.test(floatNum)) // true  ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#10小数的校验"},{"categories":["JavaScript"],"content":"11、保留n位小数 function checkFloat(n) { return new RegExp(`^([1-9]+[\\d]*(.[0-9]{1,${n}})?)$`) } // 保留2位小数 const floatReg = checkFloat(2) const floatNum1 = 1234.5 console.log(floatReg.test(floatNum1)) // true const floatNum2 = 1234.55 console.log(floatReg.test(floatNum2)) // true const floatNum3 = 1234.555 console.log(floatReg.test(floatNum3)) // false  ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#11保留n位小数"},{"categories":["JavaScript"],"content":"12、邮政编号的校验 const postalNoReg = /^\\d{6}$/ const postalNoStr1 = '522000' console.log(postalNoReg.test(postalNoStr1)) // true const postalNoStr2 = '5220000' console.log(postalNoReg.test(postalNoStr2)) // false  ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#12邮政编号的校验"},{"categories":["JavaScript"],"content":"13、QQ号的校验 说明：5-11位数字 const qqReg = /^[1-9][0-9]{4,10}$/ const qqStr1 = '1915801633' console.log(qqReg.test(qqStr1)) // true const qqStr2 = '191580163333' console.log(qqReg.test(qqStr2)) // false  ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#13qq号的校验"},{"categories":["JavaScript"],"content":"14、微信号的校验 说明：6至20位，以字母开头，字母，数字，减号，下划线 const wxReg = /^[a-zA-Z]([-_a-zA-Z0-9]{5,19})+$/ const wxStr1 = 'linsanxin885577' console.log(wxReg.test(wxStr1)) // true const wxStr2 = '厉害了我的vx' console.log(wxReg.test(wxStr2)) // false  ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#14微信号的校验"},{"categories":["JavaScript"],"content":"15、车牌号的校验 const carNoReg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-Z0-9]{4}[A-Z0-9挂学警港澳]{1}$/ const carNoStr1 = '粤A12345' console.log(carNoReg.test(carNoStr1)) // true const carNoStr2 = '广东A12345' console.log(carNoReg.test(carNoStr2)) // false  ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#15车牌号的校验"},{"categories":["JavaScript"],"content":"16、只含字母的字符串 const letterReg = /^[a-zA-Z]+$/ const letterStr1 = 'sunshineLin' console.log(letterReg.test(letterStr1)) // true const letterStr2 = 'sunshine_Lin' console.log(letterReg.test(letterStr2)) // false  ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#16只含字母的字符串"},{"categories":["JavaScript"],"content":"17、包含中文的字符串 const cnReg = /[\\u4E00-\\u9FA5]/ const cnStr1 = '我是sunshine_Lin，林三心' console.log(cnReg.test(cnStr1)) // true const cnStr2 = 'sunshine_Lin' console.log(cnReg.test(cnStr2)) // false  ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#17包含中文的字符串"},{"categories":["JavaScript"],"content":"18、密码强度的校验 说明：密码中必须包含字母、数字、特称字符，至少8个字符，最多30个字符 const passwordReg = /(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[^a-zA-Z0-9]).{8,30}/ const password1 = 'sunshine_Lin12345..' console.log(passwordReg.test(password1)) // true const password2 = 'sunshineLin12345' console.log(passwordReg.test(password2)) // false  ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#18密码强度的校验"},{"categories":["JavaScript"],"content":"19、字符串长度n的校验 function checkStrLength(n) { return new RegExp(`^.{${n}}$`) } // 校验长度为3的字符串 const lengthReg = checkStrLength(3) const str1 = 'hhh' console.log(lengthReg.test(str1)) // true const str2 = 'hhhhh' console.log(lengthReg.test(str2)) // false  ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#19字符串长度n的校验"},{"categories":["JavaScript"],"content":"20、文件拓展名的校验 function checkFileName (arr) { arr = arr.map(name =\u003e `.${name}`).join('|') return new RegExp(`(${arr})$`) } const filenameReg = checkFileName(['jpg', 'png', 'txt']) const filename1 = 'sunshine.jpg' console.log(filenameReg.test(filename1)) // true const filename2 = 'sunshine.png' console.log(filenameReg.test(filename2)) // true const filename3 = 'sunshine.txt' console.log(filenameReg.test(filename3)) // true const filename4 = 'sunshine.md' console.log(filenameReg.test(filename4)) // false ","date":"2022-03-20","objectID":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/:0:0","series":null,"tags":["JavaScript"],"title":"20个常用的正则表达式协议","uri":"/20%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#20文件拓展名的校验"},{"categories":null,"content":"\rHigh!!! 前方高能♂ \r","date":"0001-01-01","objectID":"/interesting/:0:0","series":null,"tags":null,"title":"Everybody~ High起来!","uri":"/interesting/#"},{"categories":null,"content":"关于作者 Hello World！ ","date":"0001-01-01","objectID":"/about/:0:0","series":null,"tags":null,"title":"关于","uri":"/about/#"},{"categories":null,"content":"游戏规则 点击小圆点，围住小猫。 你点击一次，小猫走一次。 直到你把小猫围住（赢），或者小猫走到边界并逃跑（输）。 \r\r\r\r\r","date":"0001-01-01","objectID":"/cat/:1:0","series":null,"tags":null,"title":"逮住那只猫!","uri":"/cat/#游戏规则"}]